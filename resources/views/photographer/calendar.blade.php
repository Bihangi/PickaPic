{{-- resources/views/photographer/calendar.blade.php --}}
@extends('layouts.dashboard')

@section('content')
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<div class="min-h-screen bg-gray-50">
    {{-- Header --}}
    <header class="gradient-bg text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 py-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <a href="{{ route('photographer.dashboard.index') }}" class="text-white hover:text-gray-200">
                        <i class="fas fa-arrow-left text-xl"></i>
                    </a>
                    <div class="w-12 h-12 bg-white rounded-full flex items-center justify-center">
                        <img src="{{ Vite::asset('resources/images/logo.png') }}" alt="PickaPic Logo" class="w-8 h-8">
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold">My Calendar</h1>
                        <p class="text-gray-200">Manage your availability and bookings</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="openAddAvailability()" class="bg-white/20 hover:bg-white/30 text-white py-2 px-4 rounded-lg transition-colors flex items-center">
                        <i class="fas fa-plus mr-2"></i>
                        Add Slot
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 py-8">
        {{-- Calendar Navigation --}}
        <div class="bg-white rounded-lg shadow-lg mb-6 p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-4">
                    <button onclick="previousMonth()" class="p-2 hover:bg-gray-100 rounded-lg">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <h2 id="current-month" class="text-2xl font-bold text-gray-800">{{ \Carbon\Carbon::now()->format('F Y') }}</h2>
                    <button onclick="nextMonth()" class="p-2 hover:bg-gray-100 rounded-lg">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <div class="w-4 h-4 bg-green-500 rounded"></div>
                        <span class="text-sm text-gray-600">Available</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-4 h-4 bg-orange-500 rounded"></div>
                        <span class="text-sm text-gray-600">Booked</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-4 h-4 bg-red-500 rounded"></div>
                        <span class="text-sm text-gray-600">Unavailable</span>
                    </div>
                </div>
            </div>

            {{-- Calendar Grid --}}
            <div class="grid grid-cols-7 gap-1">
                {{-- Days of week header --}}
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Sun</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Mon</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Tue</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Wed</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Thu</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Fri</div>
                <div class="p-3 text-center font-semibold text-gray-600 bg-gray-50">Sat</div>

                {{-- Calendar days --}}
                <div id="calendar-grid" class="contents">
                    {{-- Days will be generated by JavaScript --}}
                </div>
            </div>
        </div>

        {{-- Availability List --}}
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-xl font-bold text-gray-800">Upcoming Availability Slots</h3>
                <button onclick="openAddAvailability()" class="bg-gray-800 hover:bg-gray-900 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                    <i class="fas fa-plus mr-2"></i>
                    Add New Slot
                </button>
            </div>

            @if($availabilities->count() > 0)
                <div class="space-y-4">
                    @foreach($availabilities as $availability)
                        <div class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-4">
                                    <div class="bg-{{ $availability->status === 'available' ? 'green' : ($availability->status === 'booked' ? 'orange' : 'red') }}-100 p-3 rounded-full">
                                        <i class="fas fa-calendar text-{{ $availability->status === 'available' ? 'green' : ($availability->status === 'booked' ? 'orange' : 'red') }}-600"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-gray-800">
                                            {{ $availability->date ? \Carbon\Carbon::parse($availability->date)->format('l, M d, Y') : 'Invalid Date' }}
                                        </h4>
                                        <p class="text-gray-600">
                                            {{ $availability->start_time ? \Carbon\Carbon::parse($availability->start_time)->format('h:i A') : 'TBD' }} - 
                                            {{ $availability->end_time ? \Carbon\Carbon::parse($availability->end_time)->format('h:i A') : 'TBD' }}
                                        </p>
                                    </div>
                                    <span class="bg-{{ $availability->status === 'available' ? 'green' : ($availability->status === 'booked' ? 'orange' : 'red') }}-100 text-{{ $availability->status === 'available' ? 'green' : ($availability->status === 'booked' ? 'orange' : 'red') }}-800 px-3 py-1 rounded-full text-sm font-medium">
                                        {{ ucfirst($availability->status) }}
                                    </span>
                                </div>
                                <div class="flex space-x-2">
                                    @if($availability->status === 'available')
                                        <button onclick="editAvailability({{ $availability->id }})" class="text-gray-600 hover:text-gray-800 p-2">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button onclick="deleteAvailability({{ $availability->id }})" class="text-red-600 hover:text-red-800 p-2">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    @else
                                        <button class="text-gray-400 p-2 cursor-not-allowed" disabled>
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="text-gray-400 p-2 cursor-not-allowed" disabled>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    @endif
                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>
            @else
                <div class="text-center py-12">
                    <i class="fas fa-calendar-plus text-4xl text-gray-400 mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No availability slots yet</h3>
                    <p class="text-gray-500 mb-6">Start by adding your available time slots so clients can book your services.</p>
                    <button onclick="openAddAvailability()" class="bg-gray-800 hover:bg-gray-900 text-white px-6 py-3 rounded-lg transition-colors">
                        Add Your First Slot
                    </button>
                </div>
            @endif
        </div>
    </div>

    {{-- Include Add Availability Modal --}}
    @include('photographer.modals.add-availability')

    {{-- Notification Container --}}
    <div id="notification-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
</div>

<style>
    .gradient-bg {
        background: linear-gradient(135deg, #4a5568 0%, #2d3748 100%);
    }
    
    .calendar-day {
        min-height: 100px;
        border: 1px solid #e5e7eb;
        cursor: pointer;
        transition: background-color 0.3s ease;
        position: relative;
    }
    
    .calendar-day:hover {
        background-color: #f9fafb;
    }
    
    .calendar-day.today {
        background-color: #dbeafe;
        border-color: #3b82f6;
    }
    
    .calendar-day.other-month {
        color: #9ca3af;
        background-color: #f9fafb;
    }
    
    .availability-indicator {
        position: absolute;
        top: 4px;
        right: 4px;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .availability-badges {
        position: absolute;
        bottom: 2px;
        left: 2px;
        right: 2px;
        display: flex;
        flex-wrap: wrap;
        gap: 2px;
    }
    
    .availability-badge {
        font-size: 10px;
        padding: 1px 4px;
        border-radius: 4px;
        color: white;
        font-weight: bold;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }
    
    .available { background-color: #10b981; }
    .booked { background-color: #f59e0b; }
    .unavailable { background-color: #ef4444; }
    
    .available-bg { background-color: #10b981; }
    .booked-bg { background-color: #f59e0b; }
    .unavailable-bg { background-color: #ef4444; }
</style>

<script>
    let currentMonth = new Date();
    const availabilities = @json($availabilities);
    
    // Initialize calendar
    document.addEventListener('DOMContentLoaded', function() {
        generateCalendar();
    });
    
    function generateCalendar() {
        const year = currentMonth.getFullYear();
        const month = currentMonth.getMonth();
        
        // Update month header
        document.getElementById('current-month').textContent = 
            currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
        
        // Get first day of month and number of days
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());
        
        const grid = document.getElementById('calendar-grid');
        grid.innerHTML = '';
        
        // Generate 42 days (6 weeks)
        for (let i = 0; i < 42; i++) {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + i);
            
            const dayElement = createDayElement(date, month);
            grid.appendChild(dayElement);
        }
    }
    
    function createDayElement(date, currentMonth) {
        const div = document.createElement('div');
        div.className = 'calendar-day p-2';
        
        const isCurrentMonth = date.getMonth() === currentMonth;
        const isToday = date.toDateString() === new Date().toDateString();
        
        if (!isCurrentMonth) {
            div.classList.add('other-month');
        }
        
        if (isToday) {
            div.classList.add('today');
        }
        
        // Day number
        const dayNumber = document.createElement('div');
        dayNumber.className = 'text-sm font-semibold mb-1';
        dayNumber.textContent = date.getDate();
        div.appendChild(dayNumber);
        
        // Get availabilities for this day
        const dayAvailabilities = availabilities.filter(av => 
            new Date(av.date).toDateString() === date.toDateString()
        );
        
        if (dayAvailabilities.length > 0) {
        if (dayAvailabilities.length > 0) {
            // Determine main status
            const statuses = dayAvailabilities.map(av => av.status);
            let primaryStatus = 'available';
            if (statuses.includes('booked')) primaryStatus = 'booked';
            if (statuses.includes('unavailable')) primaryStatus = 'unavailable';

            // Add background color to the full square
            div.classList.add(`${primaryStatus}-day`);
        }

            
            // Add badges for multiple availabilities
            if (dayAvailabilities.length > 0) {
                const badgesContainer = document.createElement('div');
                badgesContainer.className = 'availability-badges';
                
                // Group by status
                const statusCounts = {};
                dayAvailabilities.forEach(av => {
                    statusCounts[av.status] = (statusCounts[av.status] || 0) + 1;
                });
                
                Object.entries(statusCounts).forEach(([status, count]) => {
                    const badge = document.createElement('span');
                    badge.className = `availability-badge ${status}`;
                    badge.textContent = count > 1 ? `${count}` : status.charAt(0).toUpperCase();
                    badge.title = `${count} ${status} slot${count > 1 ? 's' : ''}`;
                    badgesContainer.appendChild(badge);
                });
                
                div.appendChild(badgesContainer);
            }
        }
        
        // Click handler
        div.addEventListener('click', () => showDayDetails(date, dayAvailabilities));
        
        return div;
    }
    
    function previousMonth() {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        generateCalendar();
    }
    
    function nextMonth() {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        generateCalendar();
    }
    
    function showDayDetails(date, availabilities) {
        const dateString = date.toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
        
        let content = `<h3 class="text-lg font-semibold mb-3">${dateString}</h3>`;
        
        if (availabilities.length > 0) {
            content += '<div class="space-y-2">';
            availabilities.forEach(av => {
                const statusColor = av.status === 'available' ? 'green' : 
                                  av.status === 'booked' ? 'orange' : 'red';
                content += `
                    <div class="flex items-center justify-between p-3 bg-${statusColor}-50 border border-${statusColor}-200 rounded-lg">
                        <div>
                            <span class="font-medium">${av.start_time} - ${av.end_time}</span>
                            <span class="ml-2 px-2 py-1 bg-${statusColor}-100 text-${statusColor}-800 text-xs rounded-full">
                                ${av.status}
                            </span>
                        </div>
                        ${av.status === 'available' ? 
                            `<div>
                                <button onclick="editAvailability(${av.id})" class="text-gray-600 hover:text-gray-800 mr-2">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="deleteAvailability(${av.id})" class="text-red-600 hover:text-red-800">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>` : ''
                        }
                    </div>
                `;
            });
            content += '</div>';
        } else {
            content += '<p class="text-gray-500">No availability slots for this day.</p>';
        }
        
        content += `
            <div class="mt-4">
                <button onclick="openAddAvailability(); closeModal('day-details-modal')" 
                        class="bg-gray-800 hover:bg-gray-900 text-white px-4 py-2 rounded-lg">
                    Add Availability
                </button>
            </div>
        `;
        
        showModal('Day Details', content, 'day-details-modal');
    }
    
    function showModal(title, content, modalId) {
        const modalHtml = `
            <div id="${modalId}" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
                <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">${title}</h3>
                        <button onclick="closeModal('${modalId}')" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div>${content}</div>
                </div>
            </div>
        `;
        
        const existingModal = document.getElementById(modalId);
        if (existingModal) {
            existingModal.remove();
        }
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }
    
    // Modal and availability management functions
    function openAddAvailability() {
        document.getElementById('add-availability-modal').classList.remove('hidden');
    }
    
    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('hidden');
            if (modalId !== 'add-availability-modal') {
                modal.remove();
            }
        }
    }
    
    function editAvailability(availabilityId) {
        openAddAvailability();
    }
    
    function deleteAvailability(availabilityId) {
        if (confirm('Are you sure you want to delete this availability slot?')) {
            fetch(`/photographer/availabilities/${availabilityId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('An error occurred', 'error');
            });
        }
    }
    
    function showNotification(message, type = 'info') {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification fixed top-4 right-4 z-50 max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5`;
        
        const bgColor = type === 'success' ? 'bg-green-50 border-green-200' : 
                       type === 'error' ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200';
        const textColor = type === 'success' ? 'text-green-800' : 
                         type === 'error' ? 'text-red-800' : 'text-gray-800';
        const iconColor = type === 'success' ? 'text-green-400' : 
                         type === 'error' ? 'text-red-400' : 'text-gray-400';
        
        notification.innerHTML = `
            <div class="p-4 ${bgColor} border rounded-lg">
                <div class="flex">
                    <div class="flex-shrink-0">
                        ${type === 'success' ? `<i class="fas fa-check-circle ${iconColor}"></i>` : 
                          type === 'error' ? `<i class="fas fa-exclamation-circle ${iconColor}"></i>` : 
                          `<i class="fas fa-info-circle ${iconColor}"></i>`}
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium ${textColor}">${message}</p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button onclick="this.closest('.notification').remove()" class="inline-flex rounded-md p-1.5 ${textColor} hover:bg-gray-100">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification && notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
</script>

{{-- Add CSRF token meta tag --}}
<meta name="csrf-token" content="{{ csrf_token() }}">

@endsection